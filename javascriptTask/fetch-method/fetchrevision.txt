index part is of POST method
profile part is of DELETE method and edit method 

In JavaScript, the `fetch` method is used to make network requests to servers and load information. It's a part of the Fetch API that provides a more powerful and flexible feature set compared to older methods like `XMLHttpRequest`.

Here are the main types of HTTP methods you can specify with `fetch`:

1. **GET**: Retrieves data from a server at the specified resource.
   ```javascript
   fetch('url')
     .then(response => response.json())
     .then(data => console.log(data));
   ```

2. **POST**: Sends data to the server to create a new resource.
   ```javascript
   fetch('url', {
     method: 'POST',
     body: JSON.stringify({ key: 'value' })
   })
   .then(response => response.json())
   .then(data => console.log(data));
   ```

3. **PUT**: Sends data to the server to update an existing resource.
   ```javascript
   fetch('url/resource-id', {
     method: 'PUT',
     headers: {
       'Content-Type': 'application/json'
     },
     body: JSON.stringify({ key: 'updated value' })
   })
   .then(response => response.json())
   .then(data => console.log(data));
   ```

4. **DELETE**: Requests the server to delete the specified resource.
   ```javascript
   fetch('url/resource-id', {
     method: 'DELETE'
   })
   .then(response => response.json())
   .then(data => console.log(data));
   ```

5. **PATCH**: Partially updates a resource on the server.
   ```javascript
   fetch('url/resource-id', {
     method: 'PATCH',
     headers: {
       'Content-Type': 'application/json'
     },
     body: JSON.stringify({ key: 'partial update' })
   })
   .then(response => response.json())
   .then(data => console.log(data));
   ```

6. **HEAD**: Similar to GET, but it only requests the headers (which contain the status of the request).
   ```javascript
   fetch('url', {
     method: 'HEAD'
   })
   .then(response => {
     console.log(response.headers);
   });
   ```

7. **OPTIONS**: Used to describe the communication options for the target resource.
   ```javascript
   fetch('url', {
     method: 'OPTIONS'
   })
   .then(response => {
     console.log(response.headers);
   });
   ```

Each method serves a specific purpose in the context of the HTTP protocol's definition of actions to be performed on resources (like files or data). The `fetch` function allows you to specify which method to use with the `method` property in the options object.

Remember, when using methods that send data (`POST`, `PUT`, `PATCH`), you often need to set the `Content-Type` header and stringify the body content into JSON format.

The `fetch` API returns a promise, which allows you to use `.then()` to handle the response and `.catch()` to handle any errors that may occur during the request. This makes it easier to write asynchronous code that's more readable and maintainable. If you have any more questions or need further examples, feel free to ask!